// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialog(ctx echo.Context, userId UserId) error

	// (POST /dialog/{user_id}/send)
	SendDialogMessage(ctx echo.Context, userId UserId) error

	// (PUT /friend/delete/{user_id})
	DeleteFriend(ctx echo.Context, userId UserId) error

	// (PUT /friend/set/{user_id})
	SetFriend(ctx echo.Context, userId UserId) error

	// (POST /login)
	Login(ctx echo.Context) error

	// (POST /post/create)
	CreatePost(ctx echo.Context) error

	// (PUT /post/delete/{id})
	DeletePost(ctx echo.Context, id PostId) error

	// (GET /post/feed)
	GetFeed(ctx echo.Context, params GetFeedParams) error

	// (GET /post/get/{id})
	GetPost(ctx echo.Context, id PostId) error

	// (PUT /post/update)
	UpdatePost(ctx echo.Context) error

	// (GET /user/get/{id})
	GetUser(ctx echo.Context, id UserId) error

	// (POST /user/register)
	Register(ctx echo.Context) error

	// (GET /user/search)
	SearchUser(ctx echo.Context, params SearchUserParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDialog converts echo context to params.
func (w *ServerInterfaceWrapper) GetDialog(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDialog(ctx, userId)
	return err
}

// SendDialogMessage converts echo context to params.
func (w *ServerInterfaceWrapper) SendDialogMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendDialogMessage(ctx, userId)
	return err
}

// DeleteFriend converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFriend(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFriend(ctx, userId)
	return err
}

// SetFriend converts echo context to params.
func (w *ServerInterfaceWrapper) SetFriend(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetFriend(ctx, userId)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePost(ctx)
	return err
}

// DeletePost converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePost(ctx, id)
	return err
}

// GetFeed converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeed(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFeedParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFeed(ctx, params)
	return err
}

// GetPost converts echo context to params.
func (w *ServerInterfaceWrapper) GetPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPost(ctx, id)
	return err
}

// UpdatePost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePost(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, id)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// SearchUser converts echo context to params.
func (w *ServerInterfaceWrapper) SearchUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams
	// ------------- Required query parameter "first_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "first_name", ctx.QueryParams(), &params.FirstName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first_name: %s", err))
	}

	// ------------- Required query parameter "last_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "last_name", ctx.QueryParams(), &params.LastName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchUser(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dialog/:user_id/list", wrapper.GetDialog)
	router.POST(baseURL+"/dialog/:user_id/send", wrapper.SendDialogMessage)
	router.PUT(baseURL+"/friend/delete/:user_id", wrapper.DeleteFriend)
	router.PUT(baseURL+"/friend/set/:user_id", wrapper.SetFriend)
	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/post/create", wrapper.CreatePost)
	router.PUT(baseURL+"/post/delete/:id", wrapper.DeletePost)
	router.GET(baseURL+"/post/feed", wrapper.GetFeed)
	router.GET(baseURL+"/post/get/:id", wrapper.GetPost)
	router.PUT(baseURL+"/post/update", wrapper.UpdatePost)
	router.GET(baseURL+"/user/get/:id", wrapper.GetUser)
	router.POST(baseURL+"/user/register", wrapper.Register)
	router.GET(baseURL+"/user/search", wrapper.SearchUser)

}

type N400Response struct {
}

type N401Response struct {
}

type N5xxResponseHeaders struct {
	RetryAfter int
}
type N5xxJSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}

	Headers N5xxResponseHeaders
}

type GetDialogRequestObject struct {
	UserId UserId `json:"user_id"`
}

type GetDialogResponseObject interface {
	VisitGetDialogResponse(w http.ResponseWriter) error
}

type GetDialog200JSONResponse []DialogMessage

func (response GetDialog200JSONResponse) VisitGetDialogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDialog400Response = N400Response

func (response GetDialog400Response) VisitGetDialogResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetDialog401Response = N401Response

func (response GetDialog401Response) VisitGetDialogResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetDialog500JSONResponse struct{ N5xxJSONResponse }

func (response GetDialog500JSONResponse) VisitGetDialogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDialog503ResponseHeaders struct {
	RetryAfter int
}

type GetDialog503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetDialog503ResponseHeaders
}

func (response GetDialog503JSONResponse) VisitGetDialogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendDialogMessageRequestObject struct {
	UserId UserId `json:"user_id"`
	Body   *SendDialogMessageJSONRequestBody
}

type SendDialogMessageResponseObject interface {
	VisitSendDialogMessageResponse(w http.ResponseWriter) error
}

type SendDialogMessage200Response struct {
}

func (response SendDialogMessage200Response) VisitSendDialogMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SendDialogMessage400Response = N400Response

func (response SendDialogMessage400Response) VisitSendDialogMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SendDialogMessage401Response = N401Response

func (response SendDialogMessage401Response) VisitSendDialogMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SendDialogMessage500JSONResponse struct{ N5xxJSONResponse }

func (response SendDialogMessage500JSONResponse) VisitSendDialogMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendDialogMessage503ResponseHeaders struct {
	RetryAfter int
}

type SendDialogMessage503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers SendDialogMessage503ResponseHeaders
}

func (response SendDialogMessage503JSONResponse) VisitSendDialogMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteFriendRequestObject struct {
	UserId UserId `json:"user_id"`
}

type DeleteFriendResponseObject interface {
	VisitDeleteFriendResponse(w http.ResponseWriter) error
}

type DeleteFriend200Response struct {
}

func (response DeleteFriend200Response) VisitDeleteFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFriend400Response = N400Response

func (response DeleteFriend400Response) VisitDeleteFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteFriend401Response = N401Response

func (response DeleteFriend401Response) VisitDeleteFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteFriend500JSONResponse struct{ N5xxJSONResponse }

func (response DeleteFriend500JSONResponse) VisitDeleteFriendResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteFriend503ResponseHeaders struct {
	RetryAfter int
}

type DeleteFriend503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers DeleteFriend503ResponseHeaders
}

func (response DeleteFriend503JSONResponse) VisitDeleteFriendResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type SetFriendRequestObject struct {
	UserId UserId `json:"user_id"`
}

type SetFriendResponseObject interface {
	VisitSetFriendResponse(w http.ResponseWriter) error
}

type SetFriend200Response struct {
}

func (response SetFriend200Response) VisitSetFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetFriend400Response = N400Response

func (response SetFriend400Response) VisitSetFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SetFriend401Response = N401Response

func (response SetFriend401Response) VisitSetFriendResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SetFriend500JSONResponse struct{ N5xxJSONResponse }

func (response SetFriend500JSONResponse) VisitSetFriendResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type SetFriend503ResponseHeaders struct {
	RetryAfter int
}

type SetFriend503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers SetFriend503ResponseHeaders
}

func (response SetFriend503JSONResponse) VisitSetFriendResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login404Response struct {
}

func (response Login404Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type Login500JSONResponse struct{ N5xxJSONResponse }

func (response Login500JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login503ResponseHeaders struct {
	RetryAfter int
}

type Login503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers Login503ResponseHeaders
}

func (response Login503JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePostRequestObject struct {
	Body *CreatePostJSONRequestBody
}

type CreatePostResponseObject interface {
	VisitCreatePostResponse(w http.ResponseWriter) error
}

type CreatePost200JSONResponse PostId

func (response CreatePost200JSONResponse) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePost400Response = N400Response

func (response CreatePost400Response) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreatePost401Response = N401Response

func (response CreatePost401Response) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreatePost500JSONResponse struct{ N5xxJSONResponse }

func (response CreatePost500JSONResponse) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePost503ResponseHeaders struct {
	RetryAfter int
}

type CreatePost503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers CreatePost503ResponseHeaders
}

func (response CreatePost503JSONResponse) VisitCreatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePostRequestObject struct {
	Id PostId `json:"id"`
}

type DeletePostResponseObject interface {
	VisitDeletePostResponse(w http.ResponseWriter) error
}

type DeletePost200Response struct {
}

func (response DeletePost200Response) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeletePost400Response = N400Response

func (response DeletePost400Response) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeletePost401Response = N401Response

func (response DeletePost401Response) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeletePost500JSONResponse struct{ N5xxJSONResponse }

func (response DeletePost500JSONResponse) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeletePost503ResponseHeaders struct {
	RetryAfter int
}

type DeletePost503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers DeletePost503ResponseHeaders
}

func (response DeletePost503JSONResponse) VisitDeletePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetFeedRequestObject struct {
	Params GetFeedParams
}

type GetFeedResponseObject interface {
	VisitGetFeedResponse(w http.ResponseWriter) error
}

type GetFeed200JSONResponse []Post

func (response GetFeed200JSONResponse) VisitGetFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFeed400Response = N400Response

func (response GetFeed400Response) VisitGetFeedResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetFeed401Response = N401Response

func (response GetFeed401Response) VisitGetFeedResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetFeed500JSONResponse struct{ N5xxJSONResponse }

func (response GetFeed500JSONResponse) VisitGetFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetFeed503ResponseHeaders struct {
	RetryAfter int
}

type GetFeed503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetFeed503ResponseHeaders
}

func (response GetFeed503JSONResponse) VisitGetFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPostRequestObject struct {
	Id PostId `json:"id"`
}

type GetPostResponseObject interface {
	VisitGetPostResponse(w http.ResponseWriter) error
}

type GetPost200JSONResponse Post

func (response GetPost200JSONResponse) VisitGetPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPost400Response = N400Response

func (response GetPost400Response) VisitGetPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPost401Response = N401Response

func (response GetPost401Response) VisitGetPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPost500JSONResponse struct{ N5xxJSONResponse }

func (response GetPost500JSONResponse) VisitGetPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPost503ResponseHeaders struct {
	RetryAfter int
}

type GetPost503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetPost503ResponseHeaders
}

func (response GetPost503JSONResponse) VisitGetPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatePostRequestObject struct {
	Body *UpdatePostJSONRequestBody
}

type UpdatePostResponseObject interface {
	VisitUpdatePostResponse(w http.ResponseWriter) error
}

type UpdatePost200Response struct {
}

func (response UpdatePost200Response) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdatePost400Response = N400Response

func (response UpdatePost400Response) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePost401Response = N401Response

func (response UpdatePost401Response) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdatePost500JSONResponse struct{ N5xxJSONResponse }

func (response UpdatePost500JSONResponse) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdatePost503ResponseHeaders struct {
	RetryAfter int
}

type UpdatePost503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers UpdatePost503ResponseHeaders
}

func (response UpdatePost503JSONResponse) VisitUpdatePostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserRequestObject struct {
	Id UserId `json:"id"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser400Response struct {
}

func (response GetUser400Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUser404Response struct {
}

func (response GetUser404Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUser500JSONResponse struct{ N5xxJSONResponse }

func (response GetUser500JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUser503ResponseHeaders struct {
	RetryAfter int
}

type GetUser503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetUser503ResponseHeaders
}

func (response GetUser503JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type RegisterRequestObject struct {
	Body *RegisterJSONRequestBody
}

type RegisterResponseObject interface {
	VisitRegisterResponse(w http.ResponseWriter) error
}

type Register200JSONResponse struct {
	UserId *string `json:"user_id,omitempty"`
}

func (response Register200JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Register400Response struct {
}

func (response Register400Response) VisitRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Register500JSONResponse struct{ N5xxJSONResponse }

func (response Register500JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type Register503ResponseHeaders struct {
	RetryAfter int
}

type Register503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers Register503ResponseHeaders
}

func (response Register503JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchUserRequestObject struct {
	Params SearchUserParams
}

type SearchUserResponseObject interface {
	VisitSearchUserResponse(w http.ResponseWriter) error
}

type SearchUser200JSONResponse []User

func (response SearchUser200JSONResponse) VisitSearchUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchUser400Response struct {
}

func (response SearchUser400Response) VisitSearchUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SearchUser500JSONResponse struct{ N5xxJSONResponse }

func (response SearchUser500JSONResponse) VisitSearchUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchUser503ResponseHeaders struct {
	RetryAfter int
}

type SearchUser503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers SearchUser503ResponseHeaders
}

func (response SearchUser503JSONResponse) VisitSearchUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialog(ctx context.Context, request GetDialogRequestObject) (GetDialogResponseObject, error)

	// (POST /dialog/{user_id}/send)
	SendDialogMessage(ctx context.Context, request SendDialogMessageRequestObject) (SendDialogMessageResponseObject, error)

	// (PUT /friend/delete/{user_id})
	DeleteFriend(ctx context.Context, request DeleteFriendRequestObject) (DeleteFriendResponseObject, error)

	// (PUT /friend/set/{user_id})
	SetFriend(ctx context.Context, request SetFriendRequestObject) (SetFriendResponseObject, error)

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (POST /post/create)
	CreatePost(ctx context.Context, request CreatePostRequestObject) (CreatePostResponseObject, error)

	// (PUT /post/delete/{id})
	DeletePost(ctx context.Context, request DeletePostRequestObject) (DeletePostResponseObject, error)

	// (GET /post/feed)
	GetFeed(ctx context.Context, request GetFeedRequestObject) (GetFeedResponseObject, error)

	// (GET /post/get/{id})
	GetPost(ctx context.Context, request GetPostRequestObject) (GetPostResponseObject, error)

	// (PUT /post/update)
	UpdatePost(ctx context.Context, request UpdatePostRequestObject) (UpdatePostResponseObject, error)

	// (GET /user/get/{id})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)

	// (POST /user/register)
	Register(ctx context.Context, request RegisterRequestObject) (RegisterResponseObject, error)

	// (GET /user/search)
	SearchUser(ctx context.Context, request SearchUserRequestObject) (SearchUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetDialog operation middleware
func (sh *strictHandler) GetDialog(ctx echo.Context, userId UserId) error {
	var request GetDialogRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDialog(ctx.Request().Context(), request.(GetDialogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDialog")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDialogResponseObject); ok {
		return validResponse.VisitGetDialogResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SendDialogMessage operation middleware
func (sh *strictHandler) SendDialogMessage(ctx echo.Context, userId UserId) error {
	var request SendDialogMessageRequestObject

	request.UserId = userId

	var body SendDialogMessageJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendDialogMessage(ctx.Request().Context(), request.(SendDialogMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendDialogMessage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SendDialogMessageResponseObject); ok {
		return validResponse.VisitSendDialogMessageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteFriend operation middleware
func (sh *strictHandler) DeleteFriend(ctx echo.Context, userId UserId) error {
	var request DeleteFriendRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFriend(ctx.Request().Context(), request.(DeleteFriendRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFriend")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteFriendResponseObject); ok {
		return validResponse.VisitDeleteFriendResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SetFriend operation middleware
func (sh *strictHandler) SetFriend(ctx echo.Context, userId UserId) error {
	var request SetFriendRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetFriend(ctx.Request().Context(), request.(SetFriendRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetFriend")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetFriendResponseObject); ok {
		return validResponse.VisitSetFriendResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreatePost operation middleware
func (sh *strictHandler) CreatePost(ctx echo.Context) error {
	var request CreatePostRequestObject

	var body CreatePostJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePost(ctx.Request().Context(), request.(CreatePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreatePostResponseObject); ok {
		return validResponse.VisitCreatePostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePost operation middleware
func (sh *strictHandler) DeletePost(ctx echo.Context, id PostId) error {
	var request DeletePostRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePost(ctx.Request().Context(), request.(DeletePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePostResponseObject); ok {
		return validResponse.VisitDeletePostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetFeed operation middleware
func (sh *strictHandler) GetFeed(ctx echo.Context, params GetFeedParams) error {
	var request GetFeedRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFeed(ctx.Request().Context(), request.(GetFeedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFeed")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetFeedResponseObject); ok {
		return validResponse.VisitGetFeedResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPost operation middleware
func (sh *strictHandler) GetPost(ctx echo.Context, id PostId) error {
	var request GetPostRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPost(ctx.Request().Context(), request.(GetPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPostResponseObject); ok {
		return validResponse.VisitGetPostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdatePost operation middleware
func (sh *strictHandler) UpdatePost(ctx echo.Context) error {
	var request UpdatePostRequestObject

	var body UpdatePostJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePost(ctx.Request().Context(), request.(UpdatePostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePostResponseObject); ok {
		return validResponse.VisitUpdatePostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx echo.Context, id UserId) error {
	var request GetUserRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.Request().Context(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		return validResponse.VisitGetUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Register operation middleware
func (sh *strictHandler) Register(ctx echo.Context) error {
	var request RegisterRequestObject

	var body RegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Register(ctx.Request().Context(), request.(RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Register")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RegisterResponseObject); ok {
		return validResponse.VisitRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SearchUser operation middleware
func (sh *strictHandler) SearchUser(ctx echo.Context, params SearchUserParams) error {
	var request SearchUserRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchUser(ctx.Request().Context(), request.(SearchUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SearchUserResponseObject); ok {
		return validResponse.VisitSearchUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Sk4nqLyWmnttYdfp/DcAAP//69+hFSYtAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
